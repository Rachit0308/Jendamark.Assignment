@using Jendamark.Assignment.Models
@using Jendamark.Assignment.Services.Interfaces
@inject IOperationService OperationService

@if (Operations?.Count > 0)
{
    <Table>
        <TableHeader Style="color:white; background-color:#05173d">
            <TableRow>
                <TableHeaderCell>Operation Name</TableHeaderCell>
                <TableHeaderCell>Device Name</TableHeaderCell>
                <TableHeaderCell>Device Type</TableHeaderCell>
                <TableHeaderCell>Order</TableHeaderCell>
                <TableHeaderCell>Actions</TableHeaderCell>
            </TableRow>
        </TableHeader>
        <TableBody>
              @{
                    int count = 1;
                    foreach (var operation in Operations)
                    {
            <TableRow>
                        <TableRowCell>@operation.Name</TableRowCell>
                        <TableRowCell>@operation.Device?.Name</TableRowCell>
                        <TableRowCell>@operation.Device?.DeviceType</TableRowCell>
                        <TableRowCell>@operation.Order</TableRowCell>
                        <TableRowCell>
                            <!-- Edit Icon -->
                            <button class="btn btn-link" @onclick="()=> EditOperation(operation.OperationID)">
                                <i class="fas fa-edit"></i>
                            </button>

                            <!-- Delete Icon -->
                            <button class="btn btn-link text-danger" @onclick="()=>DeleteOperation(operation.OperationID) ">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                        </TableRowCell>
                       
                  
            </TableRow>
                    count++;
                }
            }
        </TableBody>
    </Table>

    }
else
{
    <span>No records found.</span>
}


@code {
    [Parameter]
    public List<Operation> Operations{ get; set; }
    [Parameter] public EventCallback<Operation> ShowEditModal { get; set; }

    protected override void OnInitialized()
    {
         LoadAllOperations();
    }
    public void LoadAllOperations()
    {
        Operations = OperationService.GetOperations().OrderBy(o => o.Order).ToList();
    }
    public async Task EditOperation(int operationId)
    {
        var operation = OperationService.GetOperationById(operationId);
        await ShowEditModal.InvokeAsync(operation);
    }
    public void DeleteOperation(int deviceId)
    {
        OperationService.RemoveOperation(deviceId);
        StateHasChanged();
    }
}
