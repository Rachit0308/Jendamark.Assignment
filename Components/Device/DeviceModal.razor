@using Jendamark.Assignment.Models
@using Jendamark.Assignment.Services.Interfaces
@inject IDeviceService DeviceService

<ModalContent Centered="true">
    <ModalHeader>
        <ModalTitle>Add Device</ModalTitle>
        <CloseButton />
    </ModalHeader>
    <ModalBody>
        <Field>
            <FieldLabel>Name</FieldLabel>
            <input type="text" class="form-control" @bind-value="newDevice.Name" placeholder="Enter Name..." />
        </Field>
        <Field>
            <FieldLabel>Device Type</FieldLabel>
            <select class="form-control" @bind="newDevice.DeviceType">
                @foreach (DeviceType type in Enum.GetValues(typeof(DeviceType)))
                {
                    <option value="@type">@type</option>
                }
            </select>
        </Field>
        @* Conditional Fields for LaserCutter *@
        @if (newDevice.DeviceType == DeviceType.LaserCutter)
        {
            <div>
                <FieldLabel> Laser Intensity:</FieldLabel>
                <input type="number" class="form-control" @bind-value="newDevice.LaserIntensity" placeholder="Enter Intensity..." />
            </div>
            <div>
                <FieldLabel>Safety Check Required:</FieldLabel>
                @* <InputCheckbox @bind-Value="SafetyCheckRequiredWrapper" /> *@
                <Check TValue="bool" @bind-Checked="@SafetyCheckRequiredWrapper" />
            </div>
        }
        @* Conditional Fields for QualityAssuranceScanner *@
        @if (newDevice.DeviceType == DeviceType.QualityAssuranceScanner)
        {
            <div>
                <FieldLabel>Validation Code:</FieldLabel>
                <input type="text" class="form-control" @bind-value="newDevice.ValidationCode" placeholder="Enter Code..." />
            </div>
            <div>
                <FieldLabel>Outcome Status:</FieldLabel>
                <input type="text" class="form-control" @bind-value="newDevice.OutcomeStatus" placeholder="Enter Outcome..." />
            </div>
        }
    </ModalBody>
    <ModalFooter>
        <Button Color="Color.Secondary" Clicked="@closeModal">Close</Button>
        @if (_selectedDevice.DeviceID != 0)
        {
            <Button Color="Color.Primary" Clicked="@UpdateDevice">Update Changes</Button>
        }
        else
        {
            <Button Color="Color.Primary" Clicked="@SaveDevice">Save Changes</Button>
        }
    </ModalFooter>
</ModalContent>

@code {
    private Device newDevice = new Device();
    private string name { get; set; } = "";
    private bool SafetyCheckRequiredWrapper
    {
        get => newDevice.SafetyCheckRequired ?? false;
        set => newDevice.SafetyCheckRequired = value;
    }
    private Device _selectedDevice;
    [Parameter]
    public Device SelectedDevice
    {
        get => _selectedDevice;
        set
        {
            _selectedDevice = value;
            if (_selectedDevice != null)
            {
                // Copy the values from SelectedOperation to newOperation
                newDevice = _selectedDevice;
            }
        }
    }
    private int deviceIdCounter = 1;
    private void HandleValidSubmit()
    {
        DeviceService.AddDevice(newDevice);
        newDevice = new Device(); // Reset for new entry
    }
    [Parameter] public EventCallback<bool> OnClose { get; set; }
    [Parameter] public EventCallback<Device> OnSave { get; set; }

    private async Task SaveDevice()
    {
        newDevice.DeviceID = deviceIdCounter;
        DeviceService.AddDevice(newDevice);
        deviceIdCounter++;
        newDevice = new Device();
        await OnClose.InvokeAsync(true);
    }
    private async Task UpdateDevice()
    {
        DeviceService.UpdateDevice(newDevice);
        newDevice = new Device();
        await OnClose.InvokeAsync(true);
    }
    private async Task closeModal()
    {
        
        await OnClose.InvokeAsync(true);
    }
}
