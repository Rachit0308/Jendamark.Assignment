@using Jendamark.Assignment.Models
@using Jendamark.Assignment.Services.Interfaces
@using Jendamark.Assignment.ViewModels
@inject IDeviceService DeviceService;
@inject IOperationService OperationService;

@if (Devices?.Count > 0)
{
    <Alert @ref="myAlert" Color="Color.Danger">
        <AlertMessage>
            @msgAlert
        </AlertMessage>
    </Alert>
    <Table>
        <TableHeader Style="color:white; background-color:#05173d">
            <TableRow>
                <TableHeaderCell>Device Name</TableHeaderCell>
                <TableHeaderCell>Device Type</TableHeaderCell>
                <TableHeaderCell>Laser Intensity</TableHeaderCell>
                <TableHeaderCell>Safety Check</TableHeaderCell>
                <TableHeaderCell>Validation Code</TableHeaderCell>
                <TableHeaderCell>Outcome Status</TableHeaderCell>
                <TableHeaderCell>Actions</TableHeaderCell>
            </TableRow>
        </TableHeader>
        <TableBody>
            @{
                foreach (var device in FilteredDevices)
                {
                    <TableRow>
                        <TableRowCell>@device.Name</TableRowCell>
                        <TableRowCell>@device.DeviceType</TableRowCell>
                        <TableRowCell>@device.LaserIntensityDisplay</TableRowCell>
                        <TableRowCell> @device.SafetyCheckDisplay</TableRowCell>
                        <TableRowCell> @device.ValidationCodeDisplay</TableRowCell>
                        <TableRowCell>@device.OutcomeStatusDisplay</TableRowCell>
                        <TableRowCell>
                            <!-- Edit Icon -->
                            <button class="btn btn-link" @onclick="()=> EditDevice(device.DeviceID)">
                                <i class="fas fa-edit"></i>
                            </button>

                            <!-- Delete Icon -->
                            <button class="btn btn-link text-danger" @onclick="()=>DeleteDevice(device.DeviceID)">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                        </TableRowCell>


                    </TableRow>

                }
            }
        </TableBody>
    </Table>
}
else
{
            <span>No records found.</span>
}


@code {
    [Parameter]
    public List<Device> Devices { get; set; }
    [Parameter] public EventCallback<Device> ShowEditModal { get; set; }
    private List<DeviceViewModel> FilteredDevices { get; set; }
    [Parameter] public EventCallback<Task> Refresh { get; set; }
    Alert myAlert;
    private string msgAlert = "";
    protected override void OnInitialized()
    {
         LoadAllDevices();
    }
    public void LoadAllDevices()
    {
        Devices = DeviceService.GetDevices();

        // Project each device into the DeviceViewModel with conditional properties
        FilteredDevices = Devices.Select(device =>
        {
            if (device is LaserDevice laserCutterDevice)
            {
                return new DeviceViewModel
                    {
                        DeviceID = laserCutterDevice.DeviceID,
                        Name = laserCutterDevice.Name,
                        DeviceType = laserCutterDevice.DeviceType,
                        LaserIntensityDisplay = laserCutterDevice.LaserIntensity.ToString(),
                        SafetyCheckDisplay = laserCutterDevice.SafetyCheckRequired ? "Required" : "Not Required",
                        ValidationCodeDisplay = "NA",
                        OutcomeStatusDisplay = "NA"
                    };
            }
            else if (device is QualityAssuranceScannerDevice qaScannerDevice)
            {
                return new DeviceViewModel
                    {
                        DeviceID = qaScannerDevice.DeviceID,
                        Name = qaScannerDevice.Name,
                        DeviceType = qaScannerDevice.DeviceType,
                        LaserIntensityDisplay = "NA",
                        SafetyCheckDisplay = "NA",
                        ValidationCodeDisplay = qaScannerDevice.ValidationCode.ToString(),
                        OutcomeStatusDisplay = qaScannerDevice.OutcomeStatus.ToString()
                    };
            }
            else
            {
                // Default mapping for other device types
                return new DeviceViewModel
                    {
                        DeviceID = device.DeviceID,
                        Name = device.Name,
                        DeviceType = device.DeviceType,
                        LaserIntensityDisplay = "NA",
                        SafetyCheckDisplay = "NA",
                        ValidationCodeDisplay = "NA",
                        OutcomeStatusDisplay = "NA"
                    };
            }
        }).ToList();
    }


    public async Task EditDevice(int deviceId)
    {
        var device = DeviceService.GetDeviceById(deviceId);
        await ShowEditModal.InvokeAsync(device);
    }
    public void DeleteDevice(int deviceId)
    {
        var operations = OperationService.GetOperations();
        var isDeviceExistInOperations = operations.Any(a => a.Device.DeviceID == deviceId);
        if (isDeviceExistInOperations)
        {
            msgAlert = "This device is using in operation.";
            myAlert.Show();
            _ = Task.Delay(3000).ContinueWith(_ =>
             {
                 myAlert.Hide();
                 msgAlert = "";
             });
            return;
        }
        else
        {
            DeviceService.RemoveDevice(deviceId);
             LoadAllDevices();
            StateHasChanged();
        }
       
    }
}
